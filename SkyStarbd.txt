 //Create tables : 

 CREATE TABLE CLIENTS (
     	numPass VARCHAR(20) PRIMARY KEY, 
 	nom VARCHAR(15) NOT NULL,
 	ville VARCHAR(15) NOT NULL
 );

 CREATE TABLE CHAMBRES(
         numC NUMERIC(20) PRIMARY KEY, 
         lits NUMERIC(15) NOT NULL DEFAULT 2,
         prix NUMERIC(15) NOT NULL
);

 CREATE TABLE RESERVATIONS(
      	numR NUMERIC(20) PRIMARY KEY, 
	numPass VARCHAR(20),
       	numC NUMERIC(20) NOT NULL,
       	arrivée date NOT NULL,
       	départ date
      CONSTRAINT fk_RESERVATIONS FOREIGN KEY(numPass) REFERENCES CLIENTS(numPass) ON DELETE CASCADE ON UPDATE CASCADE,
      CONSTRAINT fk_CHAMBRES FOREIGN KEY(numC) REFERENCES CHAMBRES(numC) ON DELETE CASCADE ON UPDATE CASCADE

 );

//Insert table
INSERT INTO clients VALUES('AD123', 'Yassine cherkaoui', 'Agadir');
INSERT INTO clients VALUES('AD321', 'Hassan', 'agadir');
INSERT INTO clients VALUES('AD342', 'Mehdi', 'Agadir')
____________________________________________________________________________________________________|
// insert CHAMBRES
INSERT INTO chambres VALUES (1,1,2Z0);
INSERT INTO chambres VALUES (2,2,430);
INSERT INTO chambres VALUES (3,3,820);
INSERT INTO chambres VALUES (4,4,110);
INSERT INTO chambres VALUES (5,5,1100);
INSERT INTO chambres VALUES (6,6,1100);
____________________________________________________________________________________________________|
//RESERVATIONS

INSERT INTO reservations VALUES (1, 'AD123', 1, '2021-04-01', '2021-04-30');
INSERT INTO reservations VALUES (2, 'AD123', 2, '2021-05-01', '2021-05-30');
INSERT INTO reservations VALUES (3, 'AD123', 3, '2021-06-01', '2021-06-30');
INSERT INTO reservations VALUES (4, 'AD123', 4, '2021-07-01', '2021-07-30');
____________________________________________________________________________________________________|
//une fonction qui affiche les client qui ont reservé les chambres quit coûtent plus de 700 dhs

CREATE FUNCTION afficherClts() RETURNS void
LANGUAGE 'plpgsql'
AS $$
BEGIN
   SELECT * FROM CLIENTS cl 
      INNER JOIN reservations r on (cl.numPass  = r.numPass)  
      INNER JOIN chambres ch on (ch.numC = r.numC )
      WHERE (prix>700);
END
$$;

____________________________________________________________________________________________________|
//fonction qui affiche les chambres réservées pendant le mois d'Août dernier
CREATE or replace FUNCTION chambresReserveLeMois8 ()
RETURNS TABLE(numC Numeric ,lits Numeric,prix Numeric) as $list$

BEGIN
    RETURN QUERY SELECT
     ch.*
    FROM
     chambres AS ch,reservations AS r
     WHERE ch.numC=r.numC AND EXTRACT(MONTH FROM r.date_arrivee )=08
	 GROUP BY ch.numC;
END; 
$list$ LANGUAGE 'plpgsql';
SELECT public.chambresreservelemois8()

____________________________________________________________________________________________________|
//fonction qui affiche les client qui ont reservé les chambres quit coûtent plus de 700 dhs

CREATE or replace FUNCTION afficherclientreservplust700dh ()
RETURNS TABLE(numPass varchar ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT
     cl.*
    FROM
     chambres AS ch,reservations AS r,"clients" AS cl
     WHERE ch.numC=r.numC AND r.numPass = cl.numPass AND ch.prix>700
	 GROUP BY cl.numPass;
END; 
$list$ LANGUAGE 'plpgsql';

SELECT public.afficherclientreservplust700dh()

____________________________________________________________________________________________________|
//fonction qui affiche les chambres reservées par les clients dont les noms commecent par A

CREATE or replace FUNCTION chambresNomCommenceParA()
RETURNS TABLE(numC Numeric ,lits Numeric,prix Numeric) as $list$

BEGIN
    RETURN QUERY SELECT
     ch.*
    FROM
     chambres AS ch,reservations AS r,clients AS cl
     WHERE ch.numC=r.numC AND r.numPass = cl.numPass AND cl.nom Like'A%'
	 GROUP BY ch.numC;
END; 
$list$ LANGUAGE 'plpgsql';
SELECT public.chambresnomcommencepara()

____________________________________________________________________________________________________|

//fonction qui affiche les clients qui ont réservés plus de 2 chambres

CREATE or replace FUNCTION clientsReservéPlus2Chambres ()
RETURNS TABLE(numPass varchar ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT 
     cl.*
    FROM
     chambres AS ch, reservations AS r,clients AS cl
     WHERE ch.numC= r.numC AND r.numPass = cl.numPass 
	 GROUP BY cl.numPass
	having count(ch.numC)>2;
END; 
$list$ LANGUAGE 'plpgsql';

SELECT public."clientsreservéplus2chambres"()

____________________________________________________________________________________________________|

//fonction qui affiche les clients qui habitent à Casablanca et qui on passé plus de 2 réservations ont réservés plus de 2 chambres

CREATE or replace FUNCTION ClientHabitCasablanca ()
RETURNS TABLE(numPass varchar ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT 
     cl.*
    FROM
     chambres AS ch, reservations AS r,clients AS cl
     WHERE ch.numC= r.numC AND r.numPass = cl.numPass AND cl.ville='Casablanca' 
	 GROUP BY cl.numPass
	having count(ch.numC)>2 AND count(r.numPass)>2 ;
END; 
$list$ LANGUAGE 'plpgsql';

SELECT public.clienthabitcasablanca()
____________________________________________________________________________________________________|

//procédure qui permet de modifer le prix des chambres qui des prix supérieurs à 700dhs par 1000dhs

CREATE OR REPLACE PROCEDURE public.updateprix(
	)
LANGUAGE 'sql'
AS $BODY$
UPDATE chambres SET prix  = '1000' WHERE prix>700
$BODY$;
____________________________________________________________________________________________________|

//procédure qui permet de supprimer les clients qui n'ont passé des réservations

create or replace procedure supprimerClientplusdeuxreserv()
language plpgsql    
as $delete$
begin
    delete from "clients" WHERE clients.numPass Not in(select numPass FROM reservations );
end;
$delete$

CALL public.supprimerclientplusdeuxreserv()
____________________________________________________________________________________________________|

//procédure qui permet d'ajouter 100dhs pour les chambres qui ont plus de 2 lits

create or replace procedure Ajouté100dhPourLits()
language plpgsql    
as $updatePrice$
begin
    update chambres 
    set prix = prix + 100
    where lits > 1;
end;$updatePrice$

CALL public.ajouté100dhpourlits()